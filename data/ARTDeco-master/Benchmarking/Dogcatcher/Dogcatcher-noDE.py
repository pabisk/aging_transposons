########################################################################################################################
# Script that runs the Dogcatcher pipeline without the differential expression module for benchmarking. This script is #
# optimized for multi-threading in order to preserve a fair comparison with ARTDeco. This script should be run in a    #
# custom conda environment, which can be generated using the following command:                                        #
# conda create -n dogcatcher pandas bioconductor-subread bioconductor-deseq2 bedtools                                  #
# Uses a modified Ensembl GTF. The R template module from the Dogcatcher GitHub has been modified to work with         #
# single-end reads.                                                                                                    #
########################################################################################################################

import os
import subprocess
from multiprocessing import Pool
import shutil

os.chdir("/gpfs/data01/bennerlab/home/sjroth/ReadThrough/Benchmarking/")

#GTF file.
gtf_file = os.path.join('dogcatcher_gtf','Homo_sapiens.GRCh38.99.withchr.gtf')

#Load annotation.
process = subprocess.Popen(['python',
                            '/gpfs/data01/bennerlab/home/sjroth/software/Dogcatcher/1.0_Dogcatcher_flatten_gtf.py',
                            '--annotation_file_with_path',gtf_file])
stdout,stderr = process.communicate()

#Discover DoGs.
'''
Define a function that can run DoG discovery for a given experiment.
'''
def discover_dog(args):

    experiment,out_dir = args
    process = subprocess.Popen(['python','/gpfs/data01/bennerlab/home/sjroth/software/Dogcatcher/2.0_Dogcatcher.py',
                                '--annotation_file_with_path',gtf_file,'--cpus','25','--BedGraph_input_min_strand',
                                experiment+'_min.bedGraph','--BedGraph_input_plu_strand',experiment+'_plu.bedGraph',
                                '--output_prefix',out_dir,'--window_size','500','--coverage_percentage','60'])
    stdout,stderr = process.communicate()

sample_to_condition = {}
cmds = []
for f in os.listdir('.'):
    if len(f) > 8 and f[-8:] == 'bedGraph':
        sample = f.split('_')[0]
        if sample not in sample_to_condition:
            condition = sample.split('-')[2]+'/'
            sample_to_condition[sample] = condition
            cmds.append((sample,condition))

pool = Pool(processes=2)
pool.map(discover_dog,cmds)
pool.close()

#Remove all files generated by script.
#Gene annotation files.
for f in os.listdir('dogcatcher_gtf'):
    fname = os.path.join('dogcatcher_gtf',f)
    if fname != gtf_file:
        os.remove(fname)

#DoG files.
for sample in sample_to_condition.keys():
    shutil.rmtree(sample)
for condition in set(sample_to_condition.values()):
    shutil.rmtree(condition)